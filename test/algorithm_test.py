#!/usr/bin/env python3

import os
import sys

import unittest
import copy
import random

current_path = os.path.dirname(__file__)
src_path = os.path.abspath(os.path.join(current_path, "../src"))
sys.path.insert(0, src_path)

from adjlist import AdjacencyList
from algorithm import dijkstra, prim, warshall, floyd
from math import inf

class TestAlgorithm(unittest.TestCase):
    def test_dijkstra(self):
        for table in [
            # Directed graphs
            (["a","b"], [("a","b",1)], "a", ([None,1], [None,"a"])),
            (["a","b"], [("b","a",1)], "b", ([1,None], ["b",None])),
            (["a","b","c"], [("a","b",1),("b","c",2)], "a", ([None,1,3], [None,"a","b"])),
            (["a","b","c","d"], [("b","a",4),("c","a",2),("c","b",1),("d","b",3),("d","c",1)], "d", ([3,2,1,None], ["c","c","d",None])),
            (["a","b","c","d"], [("b","a",6),("b","c",2),("b","d",4),("c","a",3),("c","d",1),("d","a",1)], "b", ([4,None,2,3], ["d",None,"b","c"])),
            (["a","b","c","d","e"], [("a","b",2),("a","c",5),("b","c",1),("b","d",3),("c","d",1),("c","e",10),("d","e",7)], "a", ([None,2,3,4,11], [None,"a","b","c","d"])),
            (["a","b","c","d","e"], [("a","b",3),("a","c",6),("a","d",9),("a","e",12),("b","c",1),("c","d",2),("d","e",3)], "a", ([None,3,4,6,9], [None,"a","b","c","d"])),
            (["a","b","c","d","e"], [("a","b",3),("a","c",6),("a","d",9),("a","e",12),("b","c",4),("c","d",1),("d","e",12)], "a", ([None,3,6,7,12], [None,"a","a","c","a"])),
            (["a","b","c","d","e"], [("a","b",1),("b","a",1),("b","d",1),("c","a",5),("c","b",3),("c","d",4),("d","c",2),("d","b",8),("e","d",10)], "e", ([16,15,12,10,None], ["b","c","d","e",None])),
            (["a","b","c","d","e","f"], [("b","d",7),("b","e",5),("b","f",2),("c","a",2),("c","d",6),("d","a",2),("e","c",1),("f","c",5),("f","d",6),("f","e",6)], "b", ([8,None,6,7,5,2], ["c",None,"e","b","b","b"])),
            (["a","b","c","d","e","f"], [("a","d",1),("a","f",1),("b","d",1),("c","e",1),("c","f",4),("d","a",2),("e","a",3),("e","b",1),("f","a",1)], "c", ([4,2,None,3,1,4], ["e","e",None,"b","c","c"])),
            # Undirected graph (1/4)
            (["a","b","c","d"], [("a","b",2),("a","c",5),("a","d",3),("b","a",2),("b","c",5),("b","d",3),("c","a",5),("c","b",5),("c","d",1),("d","a",3),("d","b",3),("d","c",1)], "a", ([None,2,4,3], [None,"a","d","a"])),
            (["a","b","c","d"], [("a","b",2),("a","c",5),("a","d",3),("b","a",2),("b","c",5),("b","d",3),("c","a",5),("c","b",5),("c","d",1),("d","a",3),("d","b",3),("d","c",1)], "b", ([2,None,4,3], ["b",None,"d","b"])),
            (["a","b","c","d"], [("a","b",2),("a","c",5),("a","d",3),("b","a",2),("b","c",5),("b","d",3),("c","a",5),("c","b",5),("c","d",1),("d","a",3),("d","b",3),("d","c",1)], "d", ([3,3,1,None], ["d","d","d",None])),
            # Undirected graph (2/4)
            (["a","b","c","d","e"], [("a","b",2),("a","c",1),("b","a",2),("b","c",4),("c","a",1),("c","b",4),("c","d",6),("c","e",5),("d","c",6),("d","e",3),("e","c",5),("e","d",3)], "a", ([None,2,1,7,6], [None,"a","a","c","c"])),
            (["a","b","c","d","e"], [("a","b",2),("a","c",1),("b","a",2),("b","c",4),("c","a",1),("c","b",4),("c","d",6),("c","e",5),("d","c",6),("d","e",3),("e","c",5),("e","d",3)], "b", ([2,None,3,9,8], ["b",None,"a","c","c"])),
            (["a","b","c","d","e"], [("a","b",2),("a","c",1),("b","a",2),("b","c",4),("c","a",1),("c","b",4),("c","d",6),("c","e",5),("d","c",6),("d","e",3),("e","c",5),("e","d",3)], "c", ([1,3,None,6,5], ["c","a",None,"c","c"])),
            (["a","b","c","d","e"], [("a","b",2),("a","c",1),("b","a",2),("b","c",4),("c","a",1),("c","b",4),("c","d",6),("c","e",5),("d","c",6),("d","e",3),("e","c",5),("e","d",3)], "d", ([7,9,6,None,3], ["c","a","d",None,"d"])),
            (["a","b","c","d","e"], [("a","b",2),("a","c",1),("b","a",2),("b","c",4),("c","a",1),("c","b",4),("c","d",6),("c","e",5),("d","c",6),("d","e",3),("e","c",5),("e","d",3)], "e", ([6,8,5,3,None], ["c","a","e","e",None])),
            # Undirected graph (3/4)
            (["a","b","c","d","e"], [("a","b",4),("a","c",5),("a","d",1),("b","a",4),("b","c",2),("b","d",1),("c","a",5),("c","b",2),("c","d",5),("c","e",4),("d","a",1),("d","b",1),("d","c",5),("d","e",2),("e","c",4),("e","d",2)], "a", ([None,2,4,1,3], [None,"d","b","a","d"])),
            (["a","b","c","d","e"], [("a","b",4),("a","c",5),("a","d",1),("b","a",4),("b","c",2),("b","d",1),("c","a",5),("c","b",2),("c","d",5),("c","e",4),("d","a",1),("d","b",1),("d","c",5),("d","e",2),("e","c",4),("e","d",2)], "b", ([2,None,2,1,3], ["d",None,"b","b","d"])),
            (["a","b","c","d","e"], [("a","b",4),("a","c",5),("a","d",1),("b","a",4),("b","c",2),("b","d",1),("c","a",5),("c","b",2),("c","d",5),("c","e",4),("d","a",1),("d","b",1),("d","c",5),("d","e",2),("e","c",4),("e","d",2)], "d", ([1,1,3,None,2], ["d","d","b",None,"d"])),
            (["a","b","c","d","e"], [("a","b",4),("a","c",5),("a","d",1),("b","a",4),("b","c",2),("b","d",1),("c","a",5),("c","b",2),("c","d",5),("c","e",4),("d","a",1),("d","b",1),("d","c",5),("d","e",2),("e","c",4),("e","d",2)], "e", ([3,3,4,2,None], ["d","d","e","e",None])),
            # Undirected graph (4/4)
            (["a","b","c","d","e","f"], [("a","b",9),("a","c",13),("a","d",7),("b","a",9),("b","c",2),("b","e",3),("b","f",5),("c","a",13),("c","b",2),("c","d",1),("c","e",5),("d","a",7),("d","c",1),("d","e",9),("d","f",3),("e","b",3),("e","c",5),("e","d",9),("e","f",1),("f","b",5),("f","d",3),("f","e",1)], "a", ([None,9,8,7,11,10], [None,"a","d","a","f","d"])),
            (["a","b","c","d","e","f"], [("a","b",9),("a","c",13),("a","d",7),("b","a",9),("b","c",2),("b","e",3),("b","f",5),("c","a",13),("c","b",2),("c","d",1),("c","e",5),("d","a",7),("d","c",1),("d","e",9),("d","f",3),("e","b",3),("e","c",5),("e","d",9),("e","f",1),("f","b",5),("f","d",3),("f","e",1)], "b", ([9,None,2,3,3,4], ["b",None,"b","c","b","e"])),
            (["a","b","c","d","e","f"], [("a","b",9),("a","c",13),("a","d",7),("b","a",9),("b","c",2),("b","e",3),("b","f",5),("c","a",13),("c","b",2),("c","d",1),("c","e",5),("d","a",7),("d","c",1),("d","e",9),("d","f",3),("e","b",3),("e","c",5),("e","d",9),("e","f",1),("f","b",5),("f","d",3),("f","e",1)], "d", ([7,3,1,None,4,3], ["d","c","d",None,"f","d"])),
            (["a","b","c","d","e","f"], [("a","b",9),("a","c",13),("a","d",7),("b","a",9),("b","c",2),("b","e",3),("b","f",5),("c","a",13),("c","b",2),("c","d",1),("c","e",5),("d","a",7),("d","c",1),("d","e",9),("d","f",3),("e","b",3),("e","c",5),("e","d",9),("e","f",1),("f","b",5),("f","d",3),("f","e",1)], "f", ([10,4,4,3,1,None], ["d","e","d","f","f",None])),
        ]:
            in_nodes, in_edges, start_node, want = table
            l = AdjacencyList()
            for name in in_nodes:
                l = l.add_node(name)
            for (src, dst, weight) in in_edges:
                l = l.add_edge(src, dst, weight)
            self.assertEqual(dijkstra(l, start_node), want, "Added nodes {}, added edges {}".format(in_nodes, in_edges))

    def test_prim(self):
        for table in [
            # Basic
            (["a","b"], [("a","b",1)], "a", ([None,1], [None,"a"])),
            (["a","b"], [("a","b",1),("a","a",1)], "a", ([None,1], [None,"a"])),
            (["a","b","c"], [("a","b",1),("b","c",2)], "a", ([None,1,2], [None,"a","b"])),
            (["a","b","c"], [("a","b",1),("b","c",2)], "b", ([1,None,2], ["b",None,"b"])),
            (["a","b","c"], [("a","b",1),("b","c",2)], "c", ([1,2,None], ["b","c",None])),
            # Graph 1
            (["a","b","c","d"], [("a","b",2),("a","c",4),("b","c",1),("b","d",3),("c","d",5)], "a", ([None,2,1,3], [None,"a","b","b"])),
            (["a","b","c","d"], [("a","b",2),("a","c",4),("b","c",1),("b","d",3),("c","d",5)], "b", ([2,None,1,3], ["b",None,"b","b"])),
            (["a","b","c","d"], [("a","b",2),("a","c",4),("b","c",1),("b","d",3),("c","d",5)], "c", ([2,1,None,3], ["b","c",None,"b"])),
            (["a","b","c","d"], [("a","b",2),("a","c",4),("b","c",1),("b","d",3),("c","d",5)], "d", ([2,3,1,None], ["b","d","b",None])),
            # Graph 2
            (["a","b","c","d"], [("a","b",3),("a","c",2),("a","d",7),("b","c",5),("b","d",8),("c","d",9)], "a", ([None,3,2,7], [None,"a","a","a"])),
            (["a","b","c","d"], [("a","b",3),("a","c",2),("a","d",7),("b","c",5),("b","d",8),("c","d",9)], "b", ([3,None,2,7], ["b",None,"a","a"])),
            (["a","b","c","d"], [("a","b",3),("a","c",2),("a","d",7),("b","c",5),("b","d",8),("c","d",9)], "c", ([2,3,None,7], ["c","a",None,"a"])),
            (["a","b","c","d"], [("a","b",3),("a","c",2),("a","d",7),("b","c",5),("b","d",8),("c","d",9)], "d", ([7,3,2,None], ["d","a","a",None])),
            # Graph 3
            (["a","b","c","d","e"], [("a","b",3),("a","c",1),("b","c",2),("b","d",1),("c","d",4),("c","e",3),("d","e",2)], "a", ([None,2,1,1,2], [None,"c","a","b","d"])),
            (["a","b","c","d","e"], [("a","b",3),("a","c",1),("b","c",2),("b","d",1),("c","d",4),("c","e",3),("d","e",2)], "b", ([1,None,2,1,2], ["c",None,"b","b","d"])),
            (["a","b","c","d","e"], [("a","b",3),("a","c",1),("b","c",2),("b","d",1),("c","d",4),("c","e",3),("d","e",2)], "c", ([1,2,None,1,2], ["c","c",None,"b","d"])),
            (["a","b","c","d","e"], [("a","b",3),("a","c",1),("b","c",2),("b","d",1),("c","d",4),("c","e",3),("d","e",2)], "d", ([1,1,2,None,2], ["c","d","b",None,"d"])),
            (["a","b","c","d","e"], [("a","b",3),("a","c",1),("b","c",2),("b","d",1),("c","d",4),("c","e",3),("d","e",2)], "e", ([1,1,2,2,None], ["c","d","b","e",None])),
            # Graph 4
            (["a","b","c","d","e"], [("a","b",2),("a","c",4),("a","e",3),("b","c",1),("c","d",5),("c","e",4),("d","e",2)], "a", ([None,2,1,2,3], [None,"a","b","e","a"])),
            (["a","b","c","d","e"], [("a","b",2),("a","c",4),("a","e",3),("b","c",1),("c","d",5),("c","e",4),("d","e",2)], "b", ([2,None,1,2,3], ["b",None,"b","e","a"])),
            (["a","b","c","d","e"], [("a","b",2),("a","c",4),("a","e",3),("b","c",1),("c","d",5),("c","e",4),("d","e",2)], "c", ([2,1,None,2,3], ["b","c",None,"e","a"])),
            (["a","b","c","d","e"], [("a","b",2),("a","c",4),("a","e",3),("b","c",1),("c","d",5),("c","e",4),("d","e",2)], "d", ([3,2,1,None,2], ["e","a","b",None,"d"])),
            (["a","b","c","d","e"], [("a","b",2),("a","c",4),("a","e",3),("b","c",1),("c","d",5),("c","e",4),("d","e",2)], "e", ([3,2,1,2,None], ["e","a","b","e",None])),
            # Graph 5
            (["a","b","c","d","e","f"], [("a","b",2),("a","c",4),("a","d",1),("b","c",1),("b","f",5),("c","d",3),("c","e",4),("c","f",6),("d","e",2),("e","f",7)], "a", ([None,2,1,1,2,5], [None,"a","b","a","d","b"])),
            (["a","b","c","d","e","f"], [("a","b",2),("a","c",4),("a","d",1),("b","c",1),("b","f",5),("c","d",3),("c","e",4),("c","f",6),("d","e",2),("e","f",7)], "b", ([2,None,1,1,2,5], ["b",None,"b","a","d","b"])),
            (["a","b","c","d","e","f"], [("a","b",2),("a","c",4),("a","d",1),("b","c",1),("b","f",5),("c","d",3),("c","e",4),("c","f",6),("d","e",2),("e","f",7)], "c", ([2,1,None,1,2,5], ["b","c",None,"a","d","b"])),
            (["a","b","c","d","e","f"], [("a","b",2),("a","c",4),("a","d",1),("b","c",1),("b","f",5),("c","d",3),("c","e",4),("c","f",6),("d","e",2),("e","f",7)], "d", ([1,2,1,None,2,5], ["d","a","b",None,"d","b"])),
            (["a","b","c","d","e","f"], [("a","b",2),("a","c",4),("a","d",1),("b","c",1),("b","f",5),("c","d",3),("c","e",4),("c","f",6),("d","e",2),("e","f",7)], "e", ([1,2,1,2,None,5], ["d","a","b","e",None,"b"])),
            (["a","b","c","d","e","f"], [("a","b",2),("a","c",4),("a","d",1),("b","c",1),("b","f",5),("c","d",3),("c","e",4),("c","f",6),("d","e",2),("e","f",7)], "f", ([2,5,1,1,2,None], ["b","f","b","a","d",None])),
            # Graph 6
            (["a","b","c","d","e","f"], [("a","b",2),("a","c",1),("b","d",5),("b","e",7),("c","d",4),("c","f",13),("d","e",1),("e","f",5)], "a", ([None,2,1,4,1,5], [None,"a","a","c","d","e"])),
            (["a","b","c","d","e","f"], [("a","b",2),("a","c",1),("b","d",5),("b","e",7),("c","d",4),("c","f",13),("d","e",1),("e","f",5)], "b", ([2,None,1,4,1,5], ["b",None,"a","c","d","e"])),
            (["a","b","c","d","e","f"], [("a","b",2),("a","c",1),("b","d",5),("b","e",7),("c","d",4),("c","f",13),("d","e",1),("e","f",5)], "c", ([1,2,None,4,1,5], ["c","a",None,"c","d","e"])),
            (["a","b","c","d","e","f"], [("a","b",2),("a","c",1),("b","d",5),("b","e",7),("c","d",4),("c","f",13),("d","e",1),("e","f",5)], "d", ([1,2,4,None,1,5], ["c","a","d",None,"d","e"])),
            (["a","b","c","d","e","f"], [("a","b",2),("a","c",1),("b","d",5),("b","e",7),("c","d",4),("c","f",13),("d","e",1),("e","f",5)], "e", ([1,2,4,1,None,5], ["c","a","d","e",None,"e"])),
            (["a","b","c","d","e","f"], [("a","b",2),("a","c",1),("b","d",5),("b","e",7),("c","d",4),("c","f",13),("d","e",1),("e","f",5)], "f", ([1,2,4,1,5,None], ["c","a","d","e","f",None])),
        ]:
            in_nodes, in_edges, start_node, want = table
            l = AdjacencyList()
            for name in in_nodes:
                l = l.add_node(name)
            for (src, dst, weight) in in_edges:
                l = l.add_edge(src, dst, weight)
                l = l.add_edge(dst, src, weight)
            self.assertEqual(prim(l, start_node), want, "Added nodes {}, added unidirectional edges {}".format(in_nodes, in_edges))

    def test_warshall(self):
        for table in self.make_warshall_tables():
            in_nodes, in_edges, want = table
            l = AdjacencyList()
            for name in in_nodes:
                l = l.add_node(name)
            for (src, dst, weight) in in_edges:
                l = l.add_edge(src, dst, weight)
            self.assertEqual(warshall(l), want, "Added nodes {}, added edges {}".format(in_nodes, in_edges))

    def test_floyd(self):
        for table in self.make_floyd_tables():
            in_nodes, in_edges, want = table
            l = AdjacencyList()
            for name in in_nodes:
                l = l.add_node(name)
            for (src, dst, weight) in in_edges:
                l = l.add_edge(src, dst, weight)
            self.assertEqual(floyd(l), want, "Added nodes {}, added edges {}".format(in_nodes, in_edges))

    def make_warshall_tables(self):
        tables = []
        for (n, e, m) in self.make_floyd_tables():
            tables.append((n, e, [ [ v!=inf for v in r] for r in m ]))
        return tables

    def make_floyd_tables(self):
        return [
            # Basic
            (["a"], [], [[0]]),
            (["a","b"], [("a","b",1)], [ [0,1], [inf,0] ]),
            (["a","b"], [("b","a",2)], [ [0,inf], [2,0] ]),
            (["a","b"], [("a","b",1),("b","a",2)], [ [0,1], [2,0] ]),
            (["a","b","c"], [("a","b",1), ("b","c",2)], [ [0,1,3], [inf,0,2], [inf,inf,0] ]),
            (["a","b","c"], [("a","b",1),("b","c",2),("c","a",3)], [ [0,1,3], [5,0,2], [3,4,0] ]),
            (["a","b","c"], [("a","b",1),("b","c",2),("c","a",3),("c","b",2)], [ [0,1,3], [5,0,2], [3,2,0] ]),
            # Directed graph (1/6)
            (["a","b","c","d"], [("a","c",2),("a","d",3),("b","a",5),("c","b",1),("d","b",1)], [ [0,3,2,3], [5,0,7,8], [6,1,0,9], [6,1,8,0] ]),
            # Directed graph (2/6)
            (["a","b","c","d"], [("a","b",1),("a","c",1),("b","a",1),("b","c",3),("c","d",2),("d","b",2)], [ [0,1,1,3], [1,0,2,4], [5,4,0,2], [3,2,4,0] ]),
            # Directed graph (3/6)
            (["a","b","c","d","e"], [("a","b",2),("a","d",4),("b","c",3),("c","e",1),("d","a",2),("d","c",1),("e","b",1),("e","c",2)], [ [0,2,5,4,6], [inf,0,3,inf,4], [inf,2,0,inf,1], [2,3,1,0,2], [inf,1,2,inf,0]]),
            # Directed graph (4/6)
            (["a","b","c","d","e"], [("a","b",2),("a","c",1),("b","e",2),("c","b",2),("c","d",1),("d","e",1),("d","a",3),("e","a",4)], [ [0,2,1,2,3], [6,0,7,8,2], [4,2,0,1,2], [3,5,4,0,1], [4,6,5,6,0] ]),
            # Directed graph (5/6)
            (["a","b","c","d","e","f"], [("a","b",2),("b","a",2),("b","d",3),("c","a",1),("c","d",2),("d","c",2),("d","e",3),("d","f",1),("e","b",3),("e","f",2),("f","e",2)], [ [0,2,7,5,8,6], [2,0,5,3,6,4], [1,3,0,2,5,3], [3,5,2,0,3,1], [5,3,8,6,0,2], [7,5,10,8,2,0] ]),
            # Directed graph (6/6)
            (["a","b","c","d","e","f"], [("a","b",2),("a","d",1),("b","c",3),("b","e",2),("c","a",1),("d","c",3),("d","f",4),("e","b",10),("e","d",1),("f","e",5),("f","a",7)], [ [0,2,4,1,4,5], [4,0,3,3,2,7], [1,3,0,2,5,6], [4,6,3,0,8,4], [5,7,4,1,0,5], [7,9,9,6,5,0] ]),
            # Undirected graph (1/5)
            (["a","b","c","d"], [("a","b",3),("a","c",5),("a","d",1),("b","a",3),("b","c",1),("b","d",2),("c","a",5),("c","b",1),("c","d",5),("d","a",1),("d","b",2),("d","c",5)], [ [0,3,4,1], [3,0,1,2], [4,1,0,3], [1,2,3,0] ]),
            # Undirected graph (2/5)
            (["a","b","c","d"], [("a","b",2),("a","c",1),("b","a",2),("b","c",3),("b","d",1),("c","a",1),("c","b",3),("c","d",5),("d","b",1),("d","c",5)], [ [0,2,1,3], [2,0,3,1], [1,3,0,4], [3,1,4,0] ]),
            # Undirected graph (3/5)
            (["a","b","c","d","e"], [("a","b",5),("a","c",2),("a","d",3),("b","a",5),("b","c",3),("b","e",1),("c","a",2),("c","b",3),("c","e",1),("d","a",3),("d","e",6),("e","b",1),("e","c",1),("e","d",6)], [ [0,4,2,3,3,], [4,0,2,7,1], [2,2,0,5,1], [3,7,5,0,6], [3,1,1,6,0] ]),
            # Undirected graph (4/5)
            (["a","b","c","d","e","f","g"], [("a","b",1),("a","c",7),("a","d",3),("b","a",1),("b","e",1),("b","g",3),("c","a",7),("c","d",3),("c","f",1),("d","a",3),("d","c",3),("d","f",2),("e","b",1),("e","g",1),("f","c",1),("f","d",2),("f","g",1),("g","b",3),("g","e",1),("g","f",1)], [ [0,1,5,3,2,4,3], [1,0,4,4,1,3,2], [5,4,0,3,3,1,2], [3,4,3,0,4,2,3], [2,1,3,4,0,2,1], [4,3,1,2,2,0,1], [3,2,2,3,1,1,0] ]),
            # Undirected graph (5/5)
            (["a","b","c","d","e","f"], [("a","b",1),("a","c",1),("b","a",1),("b","c",3),("c","a",1),("c","b",3),("d","e",2),("d","f",1),("e","d",2),("f","d",1)], [ [0,1,1,inf,inf,inf], [1,0,2,inf,inf,inf], [1,2,0,inf,inf,inf], [inf,inf,inf,0,2,1], [inf,inf,inf,2,0,3], [inf,inf,inf,1,3,0] ]),
        ]

if __name__ == "__main__":
    try:
        sys.exit(unittest.main())
    except KeyboardInterrupt:
        print("")
        sys.exit(1)
